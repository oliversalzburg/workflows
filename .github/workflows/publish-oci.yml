name: OCI Build/Publish

on:
  workflow_call:
    inputs:
      artifact:
        required: false
        type: string
      attest:
        default: true
        required: false
        type: boolean
      build_args:
        required: false
        type: string
      context:
        required: true
        type: string
      image_description:
        required: false
        type: string
      image_name:
        required: true
        type: string
      image_tag:
        required: true
        type: string
      image_title:
        required: false
        type: string
      is_latest:
        default: false
        required: true
        type: boolean
      push:
        default: false
        required: false
        type: boolean
      registry:
        default: ghcr.io
        required: false
        type: string

jobs:
  build-publish:
    name: OCI
    permissions:
      attestations: write
      contents: read
      id-token: write
      packages: write
      security-events: write
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4

      - if: ${{ inputs.artifact }}
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          name: ${{ inputs.artifact }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          images: ${{ inputs.registry }}/${{ inputs.image_name }}
          labels: |
            org.opencontainers.image.description=${{ inputs.image_description || inputs.image_title || inputs.image_name }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ inputs.context }}
            org.opencontainers.image.title=${{ inputs.image_title || inputs.image_name }}
            org.opencontainers.image.version=${{ inputs.image_tag }}
          tags: |
            type=raw,value=${{ inputs.image_tag }}
            type=raw,value=latest,enable=${{ inputs.is_latest }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db # v3

      - name: Log in to the registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build ${{ inputs.push && '+ Push' || '' }}
        uses: docker/build-push-action@5cd11c3a4ced054e52742c5fd54dca954e0edd85 # v6
        id: build
        env:
          SOURCE_DATE_EPOCH: 0
        with:
          build-args: ${{ inputs.build_args }}
          cache-from: type=registry,ref=${{ inputs.registry }}/${{ github.repository }}/cache
          cache-to: type=registry,ref=${{ inputs.registry }}/${{ github.repository }}/cache,mode=max
          context: ${{ inputs.context }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          # Pushes a provenance attestation to the registry, which can currently confuse
          # some clients. We skip this process for the time being, and instead attest
          # our SBOM manually later.
          provenance: false
          push: ${{ inputs.push }}
          tags: ${{ steps.meta.outputs.tags }}

      - name: Generate SBOM
        if: ${{ inputs.push }}
        uses: anchore/sbom-action@61119d458adab75f756bc0b9e4bde25725f86a7a # v0
        with:
          artifact-name: ${{ inputs.image_tag }}.sbom.spdx.json
          format: spdx-json
          image: ${{ inputs.registry }}/${{ inputs.image_name }}:${{ inputs.image_tag }}
          output-file: ${{ inputs.image_tag }}.sbom.spdx.json
          upload-artifact: true
          upload-release-assets: false

      - name: Grype scan
        if: ${{ inputs.push }}
        uses: anchore/scan-action@64a33b277ea7a1215a3c142735a1091341939ff5 # v4
        id: scan
        with:
          add-cpes-if-none: true
          fail-build: false
          image: ${{ inputs.registry }}/${{ inputs.image_name }}:${{ inputs.image_tag }}
          severity-cutoff: critical

      - name: Store SARIF report
        if: ${{ inputs.push }}
        uses: actions/upload-artifact@834a144ee995460fba8ed112a2fc961b36a5ec5a # v4
        with:
          name: ${{ inputs.image_tag }}.sarif.json
          path: ${{ steps.scan.outputs.sarif }}

      - name: Upload scan report
        if: ${{ inputs.push }}
        uses: github/codeql-action/upload-sarif@f0f3afee809481da311ca3a6ff1ff51d81dbeb24 # v3
        with:
          category: ${{ inputs.image_name }}-${{ inputs.image_tag }}
          sarif_file: ${{ steps.scan.outputs.sarif }}

      - name: Upload SBOM attestation
        uses: actions/attest-sbom@f19ab44411e02574a74181cec8eb584319d0f779 # v1
        if: ${{ inputs.attest && inputs.push }}
        id: attest
        with:
          subject-name: ${{ inputs.registry }}/${{ inputs.image_name }}
          subject-digest: ${{ steps.build.outputs.digest }}
          sbom-path: ${{ inputs.image_tag }}.sbom.spdx.json
          push-to-registry: true
