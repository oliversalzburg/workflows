name: Publish

on:
  workflow_call:
    inputs:
      artifact-name:
        default: ""
        description: The name of a previously generated build artifact that should be used for building the image.
        required: false
        type: string
      build-args:
        description: Additional build arguments to pass to the container builder.
        required: false
        type: string
      containerfile:
        default: Dockerfile
        description: The name of the container image manifest. Relative to the `context`.
        required: false
        type: string
      context:
        default: "."
        description: The container image build context working-directory.
        required: false
        type: string
      dist-tag:
        description: Floating release tag to put on the image.
        required: false
        type: string
      image-description:
        description: Value for `org.opencontainers.image.description`.
        required: false
        type: string
      image-name:
        description: The name of the image, including scope.
        required: true
        type: string
      image-tag:
        description: The tag to place on the image.
        required: true
        type: string
      image-title:
        description: Value for `org.opencontainers.image.title`.
        required: false
        type: string
      is-latest:
        default: false
        description: DEPRECATED! Use dist-tag instead. Should this image also be tagged as 'latest'?
        required: false
        type: boolean
      push:
        default: false
        description: Should we push the image to the registry?
        required: false
        type: boolean
      registry:
        default: ghcr.io
        description: Which registry should we use?
        required: false
        type: string
      with-sarif:
        default: false
        description: Should we generate a vulnerability report?
        required: false
        type: boolean
      with-sbom:
        default: false
        description: Should we generate an SBOM for the OCI?
        required: false
        type: boolean
      with-sbom-attest:
        default: false
        description: Should we have the SBOM for the image attested?
        required: false
        type: boolean
    outputs:
      publish-url:
        description: The registry URL where the container version was published.
        value: ${{ jobs.publish.outputs.publish-url }}

jobs:
  publish:
    name: OCI
    outputs:
      publish-url: ${{ steps.details.outputs.publish-url }}
    permissions:
      attestations: write
      contents: read
      id-token: write
      packages: write
      security-events: write
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          persist-credentials: false

      - if: ${{ inputs.artifact-name }}
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        with:
          name: ${{ inputs.artifact-name }}

      - id: meta
        name: Extract metadata
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: ${{ inputs.registry }}/${{ inputs.image-name }}
          labels: |
            org.opencontainers.image.description=${{ inputs.image-description || inputs.image-title || inputs.image-name }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ inputs.context }}
            org.opencontainers.image.title=${{ inputs.image-title || inputs.image-name }}
            org.opencontainers.image.version=${{ inputs.image-tag }}
          tags: |
            type=raw,value=${{ inputs.image-tag }}
            type=raw,value=${{ inputs.dist-tag || 'ignored' }},enable=${{ inputs.dist-tag != '' }}
            type=raw,value=latest,enable=${{ inputs.is-latest }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

      - name: Log in to the registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - env:
          DOCKER_BUILD_RECORD_UPLOAD: false
          DOCKER_BUILD_SUMMARY: false
          SOURCE_DATE_EPOCH: 0
        id: build
        name: Build ${{ inputs.push && '+ Push' || '' }}
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
        with:
          build-args: ${{ inputs.build-args }}
          cache-from: type=registry,ref=${{ inputs.registry }}/${{ github.repository }}/cache
          cache-to: type=registry,ref=${{ inputs.registry }}/${{ github.repository }}/cache,mode=max
          context: ${{ inputs.context }}
          file: ${{ inputs.context }}/${{ inputs.containerfile }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          # Pushes a provenance attestation to the registry, which can currently confuse
          # some clients. We skip this process for the time being, and instead attest
          # our SBOM manually later.
          provenance: false
          push: ${{ inputs.push }}
          tags: ${{ steps.meta.outputs.tags }}

      - id: details
        name: Result
        run: |
          DIST_URL="https://${{ inputs.registry }}/${{ inputs.image-name }}:${{ inputs.dist-tag }}"
          PUBLISH_URL="https://${{ inputs.registry }}/${{ inputs.image-name }}:${{ inputs.image-tag }}"
          echo "publish-url=$PUBLISH_URL" >> "$GITHUB_OUTPUT"
          echo "Published OCI to <$PUBLISH_URL>" >> $GITHUB_STEP_SUMMARY
          echo "Tagged OCI as <$DIST_URL>" >> $GITHUB_STEP_SUMMARY

      - if: ${{ inputs.with-sbom && inputs.push }}
        name: Generate SBOM
        uses: anchore/sbom-action@da167eac915b4e86f08b264dbdbc867b61be6f0c # v0
        with:
          artifact-name: ${{ inputs.image-title }}-${{ inputs.image-tag }}.sbom.spdx.json
          format: spdx-json
          image: ${{ inputs.registry }}/${{ inputs.image-name }}:${{ inputs.image-tag }}
          upload-artifact: true
          upload-release-assets: false

      - id: scan
        if: ${{ inputs.with-sarif }}
        name: Grype scan
        uses: anchore/scan-action@1638637db639e0ade3258b51db49a9a137574c3e # v6
        with:
          add-cpes-if-none: true
          fail-build: false
          image: ${{ inputs.registry }}/${{ inputs.image-name }}:${{ inputs.image-tag }}
          severity-cutoff: critical

      - if: ${{ inputs.with-sarif }}
        name: Store SARIF report
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: ${{ inputs.image-title }}-${{ inputs.image-tag }}.sarif.json
          path: ${{ steps.scan.outputs.sarif }}
          retention-days: 1

      - if: ${{ inputs.with-sarif }}
        name: Upload scan report
        uses: github/codeql-action/upload-sarif@2d92b76c45b91eb80fc44c74ce3fce0ee94e8f9d # v3
        with:
          category: ${{ inputs.image-name }}-${{ inputs.image-tag }}
          sarif_file: ${{ steps.scan.outputs.sarif }}

      - if: ${{ inputs.with-sbom && inputs.with-sbom-attest && inputs.push }}
        id: attest
        name: Upload SBOM attestation
        uses: actions/attest-sbom@4651f806c01d8637787e274ac3bdf724ef169f34 # v3
        with:
          subject-name: ${{ inputs.registry }}/${{ inputs.image-name }}
          subject-digest: ${{ steps.build.outputs.digest }}
          sbom-path: ${{ inputs.image-title }}-${{ inputs.image-tag }}.sbom.spdx.json
          push-to-registry: true
